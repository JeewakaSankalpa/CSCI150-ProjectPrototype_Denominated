/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package class_management;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kylef
 */
public class Attendance extends javax.swing.JPanel {

    /**
     * Creates new form Attendance
     */
    public Attendance() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCID = new javax.swing.JTextField();
        bttSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        attendanceTable = new javax.swing.JTable();
        lblClassID = new javax.swing.JLabel();

        jLabel1.setText("Class ID");

        bttSearch.setText("Search");
        bttSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttSearchActionPerformed(evt);
            }
        });

        attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "mm/dd", "mm/dd"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(attendanceTable);
        if (attendanceTable.getColumnModel().getColumnCount() > 0) {
            attendanceTable.getColumnModel().getColumn(0).setResizable(false);
            attendanceTable.getColumnModel().getColumn(1).setResizable(false);
            attendanceTable.getColumnModel().getColumn(2).setResizable(false);
            attendanceTable.getColumnModel().getColumn(3).setResizable(false);
        }

        lblClassID.setText("ClassID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCID, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bttSearch)
                .addGap(91, 91, 91)
                .addComponent(lblClassID)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttSearch)
                    .addComponent(lblClassID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bttSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttSearchActionPerformed
        try {
            DBClass db = new DBClass();
            Connection con = db.getdbConnection();
            PreparedStatement pst = con.prepareStatement("select * from Shedule where Class_Classs_ID = " + txtCID.getText() + " ORDER BY Student_Student_ID");
            PreparedStatement pst1 = con.prepareStatement("select * from Class where Classs_ID = " + txtCID.getText());
            PreparedStatement pst2;
            ResultSet rs = pst1.executeQuery();
            ResultSet RecordLIne;
            if (rs.next()) {
                lblClassID.setText(rs.getString(3));

                ResultSet SIDs = pst.executeQuery();
                SIDs.next();
                //get the dates and make the table
                System.out.println("Test");
                pst2 = con.prepareStatement("SELECT * FROM ClassManager.Attendance where Class_Classs_ID = "+txtCID.getText()+" AND Student_Student_ID = "+SIDs.getString(1)+" ORDER BY Date");
                    RecordLIne = pst2.executeQuery();
 System.out.println("Test22");
                    Vector<String> Dates = new Vector<String>();
                    Dates.add("Student ID");
                    while (RecordLIne.next()) {
                        Dates.add(RecordLIne.getString(1));

                    }
                attendanceTable.setModel(new DefaultTableModel(null, Dates));
        
                
                
                
                SIDs = pst.executeQuery();
                Vector<Vector<String>> Records = new Vector<Vector<String>>();
                    System.out.println("Test1");
                while (SIDs.next()) {
                    pst2 = con.prepareStatement("SELECT * FROM ClassManager.Attendance where Class_Classs_ID = "+txtCID.getText()+" AND Student_Student_ID = "+SIDs.getString(1)+" ORDER BY Date");
                    RecordLIne = pst2.executeQuery();
                    Vector<String> Record = new Vector<String>();
                       Record.add(SIDs.getString(1));
                    while (RecordLIne.next()) { 
                            if(RecordLIne.getBoolean(3))
                                Record.add(""+1); //Attendance
                            else
                                Record.add(""+0);
                        

                    }
                    Records.add(Record);
                }
                DefaultTableModel tm = (DefaultTableModel) attendanceTable.getModel();
                for (int i = 0; i < Records.size(); i++) {
                    tm.addRow(Records.elementAt(i));
                }
           
            
            
            attendanceTable.setModel(tm);
            attendanceTable.setVisible(true);
        
                
            } else {
                JOptionPane.showMessageDialog(this, "Class ID does not Match Any Records.");
            }
            //VEctor dates,
            ///// Initialize the table with the Dates
            // Select * from Student Shedule where ClassID ='getID'//arrange Accending
            //vector
            //Add Student IDs to a VEctor
            // Select Student ID From Attendance Table where class ID ='getID' && Date  //arrange Accending
            // vector<boolean> b
            /* while(rs.next()){
            if(ID = row.ID)
            //      }
            /*
            vector<Vector<>> records
            vector record line   //store StudentID Date, Bool
            if(SID ==table.row[i] ){
            Date
            }
             */
        } catch (Exception ex) {
            Logger.getLogger(Attendance.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bttSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable attendanceTable;
    private javax.swing.JButton bttSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClassID;
    private javax.swing.JTextField txtCID;
    // End of variables declaration//GEN-END:variables
}
